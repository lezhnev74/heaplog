<div style="height:150px;position: relative;">
    <canvas id="plot"></canvas>
    <div style="text-align: right;">
        <a href="#" class="text-muted" style="" id="plot_reset">reset zoom</a>
    </div>
</div>
<script>

    $(function () {
        start = {{.FromMilli}}; // default query scope that we cannot leave
        end = {{.ToMilli}};

        function startFetch({chart}, shouldNotRefreshResults) {
            const {min, max} = chart.scales.x;
            data = fetchData(min, max);
            chart.data.datasets[0].data = data

            if (data.length) {
                chart.options.scales.x.min = data[0].x
                chart.options.scales.x.max = data[data.length - 1].x
            }
            chart.stop(); // make sure animations are not running
            chart.update('none'); // <-- UPDATE


            if (!shouldNotRefreshResults) {
                // Reload the results in the main area with the new query scope:
                url = "/cmd/page";
                target = "#query_results";
                htmx.ajax('GET', url, {
                    target: target,
                    values: {
                        queryId: '{{.QueryId}}',
                        from: Math.trunc(min),
                        to: Math.trunc(max) + 1, // on server times are micro, so round up to the next milli for that
                    }
                })
            }
        }

        function fetchData(x1, x2) {
            d = parseInt($("#plot").parent().width() / 4)
            var result = {}
            $.ajax({
                url: '/query/{{.QueryId}}/aggregate',
                data: {
                    from: Math.trunc(x1),
                    to: Math.trunc(x2) + 1, // on server times are micro, so round up to the next milli for that
                    discretization: d,
                },
                success: function (r) {
                    result = r
                },
                async: false,
                dataType: 'json',
            });
            return result
        }

        //////////////////////

        const scales = {
            x: {
                position: 'bottom',
                min: {{.FromMilli}},
                max: {{.ToMilli}},
                type: 'time',
                ticks: {
                    autoSkip: true,
                    autoSkipPadding: 50,
                    maxRotation: 0
                },
                time: {
                    timezone: "UTC",
                    tooltipFormat: 'DD HH:mm:ss.SSS',
                    displayFormats: {
                        hour: 'DD HH:mm',
                        minute: 'DD HH:mm',
                        second: 'DD HH:mm:ss.SSS',
                        millisecond: 'DD HH:mm:ss.SSS'
                    },
                    parsing: false,
                },
                adapters: {
                    date: {
                        setZone: true,
                        zone: 'utc',
                    }
                }
            },
            y: {
                type: 'linear',
                position: 'left',
            },
        };
        const zoomOptions = {
            limits: {
                x: {min: {{.FromMilli}}, max: {{.ToMilli}}},
            },
            zoom: {
                wheel: {
                    enabled: true,
                },
                drag: {
                    enabled: true,
                },
                mode: 'x',
                onZoomComplete: $.debounce(500, startFetch)
            }
        };
        const config = {
            type: 'bar',
            data: {
                datasets: [{
                    pointBorderWidth: 0,
                    borderColor: "#000",
                    backgroundColor: "#000",
                    hoverBackgroundColor: "#999999",
                    minBarLength: 5,
                    // barThickness: 'flex', // 4
                    maxBarThickness: 6,
                    // categoryPercentage: 1.0,
                    // barPercentage: 0.7,
                    grouped: true,
                    data: [],
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: scales,
                plugins: {
                    zoom: zoomOptions,
                    title: {
                        display: false,
                    },
                    legend: {
                        display: false,
                    }
                },
                transitions: {
                    zoom: {
                        animation: {
                            duration: 100
                        }
                    }
                }
            }
        };


        // cleanup previous instance
        c = new Chart(document.getElementById('plot'), config);
        startFetch(c.$context, true) // initiate fetching data
        $(window).resize(function () {
            var width = $("#plot").parent().width();
            var height = $("#plot").parent().height();
            console.log(width);
            c.resize(width, height);
        });

        $("#plot_reset").click(function () {

            if (c.options.scales.x.min == start && c.options.scales.x.max == end) {
                return false;
            }

            c.options.scales.x.min = start
            c.options.scales.x.max = end
            c.update('none')
            startFetch({chart: c})

            return false;
        });
    })
</script>